# Destroys all resources created in the Dev GCP environment
name: destroy-dev-environment

on:
  workflow_dispatch:

permissions:
  contents: read
  deployments: write

defaults:
  run:
    working-directory: terraform/dev

jobs:
  destroy:
    name: Destroy GCP Dev Environment
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: chrnorm/deployment-action@v2
        name: Create GitHub deployment
        id: deployment
        with:
          token: ${{ github.token }}
          environment: dev

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Destroy
        run: terraform destroy -auto-approve -input=false

      - name: Delete Previous deployments
        uses: actions/github-script@v6
        with:
          script: |
            const deployments = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha
            });
            await Promise.all(
              deployments.data.map(async (deployment) => {
                # we can only delete inactive deployments, so let's deactivate them first
                await github.rest.repos.createDeploymentStatus({ 
                  owner: context.repo.owner, 
                  repo: context.repo.repo, 
                  deployment_id: deployment.id, 
                  state: 'inactive' 
                });
                return github.rest.repos.deleteDeployment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  deployment_id: deployment.id
                });
              })
            );

      - name: Update deployment status (failure)
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ github.token }}
          environment: dev
          state: inactive
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
